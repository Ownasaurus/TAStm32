on:
  push:
    branches:
      - master

name: Create and Update Latest Release & Merge TAStm32GUI

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout our code
        uses: actions/checkout@v2
      - name: Checkout TAStm32GUI code and merge into our python folder
        run: |
          git clone https://github.com/Zayitskin/TAStm32GUI/
          cp TAStm32GUI/hook.py python/
          cp TAStm32GUI/main.py python/
          cp TAStm32GUI/tasfile.py python/
          cp TAStm32GUI/widgets.py python/
      - name: Build and Rename Release Binaries
        run: |
          sudo apt-get install gcc-arm-none-eabi binutils-arm-none-eabi
          mkdir firmware
          make v3
          cp build/*.bin firmware/tastm32v3.bin
          cp build/*.hex firmware/tastm32v3.hex
          make clean
          make v4
          cp build/*.bin firmware/tastm32v4.bin
          cp build/*.hex firmware/tastm32v4.hex
      - name: Create Python Asset
        run: zip -j python.zip python/*
      - name: Create Latest Release
        id: create_release
        uses: GongT/actions-recreate-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: latest
          release_name: Latest Compiled Firmware
          body: Auto build from ${{ github.sha }} (master)
          draft: false
          prerelease: false
      - name: Upload Bin Release Asset
        id: upload-release-asset-bin
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./firmware/tastm32v4.bin
          asset_name: tastm32v4.bin
          asset_content_type: application/octet-stream
      - name: Upload Hex Release Asset
        id: upload-release-asset-hex
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./firmware/tastm32v4.hex
          asset_name: tastm32v4.hex
          asset_content_type: application/octet-stream
      - name: Upload Bin Release Asset
        id: upload-release-asset-bin2
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./firmware/tastm32v3.bin
          asset_name: tastm32v3.bin
          asset_content_type: application/octet-stream
      - name: Upload Hex Release Asset
        id: upload-release-asset-hex2
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./firmware/tastm32v3.hex
          asset_name: tastm32v3.hex
          asset_content_type: application/octet-stream
      - name: Upload Python Release Asset
        id: upload-release-asset-python
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./python.zip
          asset_name: python.zip
          asset_content_type: application/zip
